/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AuthUser as PrismaAuthUser } from "@prisma/client";

export class AuthUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AuthUserCountArgs, "select">): Promise<number> {
    return this.prisma.authUser.count(args);
  }

  async authUsers(
    args: Prisma.AuthUserFindManyArgs
  ): Promise<PrismaAuthUser[]> {
    return this.prisma.authUser.findMany(args);
  }
  async authUser(
    args: Prisma.AuthUserFindUniqueArgs
  ): Promise<PrismaAuthUser | null> {
    return this.prisma.authUser.findUnique(args);
  }
  async createAuthUser(
    args: Prisma.AuthUserCreateArgs
  ): Promise<PrismaAuthUser> {
    return this.prisma.authUser.create(args);
  }
  async updateAuthUser(
    args: Prisma.AuthUserUpdateArgs
  ): Promise<PrismaAuthUser> {
    return this.prisma.authUser.update(args);
  }
  async deleteAuthUser(
    args: Prisma.AuthUserDeleteArgs
  ): Promise<PrismaAuthUser> {
    return this.prisma.authUser.delete(args);
  }
}
